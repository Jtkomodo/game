package gameEngine;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL15.*;
import static org.lwjgl.opengl.GL20.*;

import java.nio.*;

import  org.lwjgl.BufferUtils;


public class Model2 {
	 private int drawCount;
		private int v_id,tex_id,ind_id;
	private int indBase,pionter;
	
	
	public Model2() {
		drawCount=0;
		indBase=0;
		pionter=0;
		 v_id=glGenBuffers();//for vertices		
		   tex_id=glGenBuffers();//for uv Coords
			ind_id=glGenBuffers();//for indices  
			
		
		
		
		
		glBindBuffer(GL_ARRAY_BUFFER,v_id);
		  glBufferData(GL_ARRAY_BUFFER,10000,GL_DYNAMIC_DRAW);
		
		 
	    glBindBuffer(GL_ARRAY_BUFFER,tex_id);
		  glBufferData(GL_ARRAY_BUFFER,10000,GL_DYNAMIC_DRAW);
			
		  
	    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ind_id);
	      glBufferData(GL_ELEMENT_ARRAY_BUFFER,10000,GL_DYNAMIC_DRAW);
         unbindBuffers();
		}
	
	
	public void draw() {
		
		glBindBuffer(GL_ARRAY_BUFFER,v_id);//bind so we can use 
		  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0);
			
	   glBindBuffer(GL_ARRAY_BUFFER,tex_id);
		  glVertexAttribPointer(1,2,GL_FLOAT,false,0,0);
				
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ind_id);
	      glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,0);
	    
	  	
		}
	
	
	
public void loadvalues(float[] v,float[] uv) {
	if((v.length == uv.length) && v.length==8) {
		 System.out.println("d"+drawCount);
		 System.out.println("i"+indBase);
		 System.out.println("p"+pionter);
		 

	
	glBindBuffer(GL_ARRAY_BUFFER, v_id);
	 glBufferSubData(GL_ARRAY_BUFFER,pionter, makeBuffer(v));
//	glBindBuffer(GL_ARRAY_BUFFER,0);
	 
	glBindBuffer(GL_ARRAY_BUFFER, tex_id);
	 glBufferSubData(GL_ARRAY_BUFFER, pionter, makeBuffer(uv));
	//glBindBuffer(GL_ARRAY_BUFFER,0);
		
int[] indeces= new int[] {
			indBase,indBase+1,indBase+2,
			indBase+2,indBase+3,indBase	
			
			
			
			
	};
	
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ind_id);
	 glBufferSubData(GL_ELEMENT_ARRAY_BUFFER, drawCount, makeBuffer(indeces));
  
	// drawCount=drawCount+6;
	//indBase=indBase+6;
	 pionter=pionter+6;
	 
	
	}
	
	
	
}
	
private static FloatBuffer makeBuffer(float[] array ) {
	FloatBuffer buffer= BufferUtils.createFloatBuffer(array.length); //this just is initializing our buffer with the correct capacity
	buffer.put(array);//puts the data in the newly created buffer
	buffer.flip();//this allows the buffer to be read from very very important 
	return buffer;
}
//same as float just integer this time

private static IntBuffer makeBuffer(int[] array ) {
	IntBuffer buffer= BufferUtils.createIntBuffer(array.length); 
	buffer.put(array);  
	buffer.flip();
	return buffer;
	
}	
	
	
public static void enable() {
	   glEnableVertexAttribArray(0);
	   glEnableVertexAttribArray(1);
}
public static void disable() {
	   glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
}

private static void unbindBuffers() {
	glBindBuffer(GL_ARRAY_BUFFER,0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);		
	
}	
	
	
	
	
	
}
